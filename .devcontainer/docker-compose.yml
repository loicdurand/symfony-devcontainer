services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/workspace
    depends_on:
      - db
    environment:
      - DATABASE_URL=mysql://mariadb:mariadb@db:3306/mariadb?serverVersion=10.11
    command: caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
    ports:
      - "8080:8080"
      - "443:443"
    networks:
      - devcontainer-network

  db:
    image: mariadb:10.11
    restart: unless-stopped
    volumes:
      - mariadb-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: mariadb
      MYSQL_DATABASE: mariadb
      MYSQL_USER: mariadb
      MYSQL_PASSWORD: mariadb
    ports:
      - "3306:3306"
    networks:
      - devcontainer-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: db
      PMA_USER: mariadb
      PMA_PASSWORD: mariadb
      UPLOAD_LIMIT: 20M
    ports:
      - "8899:80"
    networks:
      - devcontainer-network

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  #app_data:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
  mariadb-data:

networks:
  devcontainer-network:
    driver: bridge
